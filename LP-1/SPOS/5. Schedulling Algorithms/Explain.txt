### 1. Objective
To simulate and demonstrate the implementation of different **CPU Scheduling Algorithms**: 
- **First Come First Serve (FCFS)**
- **Shortest Job First (SJF) (Preemptive)**
- **Priority Scheduling (Non-Preemptive)**
- **Round Robin (Preemptive)**

The program will simulate these algorithms with a set of processes and their associated burst times, arrival times, and priorities where applicable, and display the relevant scheduling results, including turnaround time and waiting time.

### 2. Expected Output
The program should output:
- **For each algorithm**: 
  - Process Execution Order
  - Completion Time for each process
  - Turnaround Time for each process
  - Waiting Time for each process
  - Average Waiting Time
  - Average Turnaround Time

### 3. Software Requirement
- **Operating System**: Windows/Linux/MacOS
- **Compiler**: GCC (for C programs)
- **Libraries**: `stdio.h`, `stdlib.h`

### 4. Theory

#### A. Necessary Concepts

1. **First Come First Serve (FCFS)**:
   - FCFS is the simplest CPU scheduling algorithm.
   - It schedules processes in the order of their arrival time (first come, first served).
   - **Drawback**: It may cause the **convoy effect**, where a long process can delay all other processes.

2. **Shortest Job First (SJF) (Preemptive)**:
   - SJF aims to minimize waiting time by always selecting the process with the shortest burst time.
   - **Preemptive SJF**: If a new process with a shorter burst time arrives, the CPU will preempt the current process.
   - **Drawback**: SJF cannot be easily implemented without knowing the burst time of future processes.

3. **Priority Scheduling (Non-Preemptive)**:
   - Each process is assigned a priority. The CPU scheduler selects the process with the highest priority.
   - **Drawback**: Low priority processes may starve.

4. **Round Robin (RR) (Preemptive)**:
   - Each process is assigned a fixed time slice (quantum). When a process's time slice expires, it is preempted, and the CPU scheduler switches to the next process in the queue.
   - **Drawback**: It may lead to increased turnaround time if the quantum is too large.

#### B. Algorithm and Explanation

### **Algorithm 1: FCFS (First Come First Serve)**
- Sort the processes by their arrival time.
- Execute them in the order of their arrival.
- Calculate the completion time, turnaround time, and waiting time.

### **Algorithm 2: SJF (Preemptive)**
- Sort the processes by burst time.
- The process with the shortest burst time is executed first. If a new process arrives with a shorter burst time, preempt the current process and execute the new process.
- Calculate the waiting time and turnaround time.

### **Algorithm 3: Priority Scheduling (Non-Preemptive)**
- Sort the processes by priority (higher number means higher priority).
- The process with the highest priority is selected for execution. In case of a tie, the process with the earliest arrival time is selected.
- Calculate waiting and turnaround times.

### **Algorithm 4: Round Robin (Preemptive)**
- Each process is given a fixed time slice or quantum.
- If a process doesn't finish within its quantum, it is preempted, and the next process in the queue is executed.
- Calculate waiting and turnaround times.

#### C. Flowchart

```plaintext
+----------------------+
|   Start (main)       |
+----------------------+
           |
           v
+----------------------+
|   Initialize Inputs  |
|   (Processes, Times) |
+----------------------+
           |
           v
+----------------------+
|  Execute Scheduling  |
|  Algorithms (FCFS,   |
|  SJF, Priority, RR) |
+----------------------+
           |
           v
+----------------------+
|   Output Results     |
|   (Completion Time,  |
|   Turnaround Time,   |
|   Waiting Time)      |
+----------------------+
           |
           v
       +------+
       | End  |
       +------+
```

### 5. Code Implementation

#### C Program to Simulate the Scheduling Algorithms

```c
#include <stdio.h>
#include <stdlib.h>

#define MAX 10

typedef struct {
    int pid;             // Process ID
    int bt;              // Burst time
    int at;              // Arrival time
    int wt;              // Waiting time
    int tat;             // Turnaround time
    int remaining_bt;    // Remaining burst time (for preemptive algorithms)
    int priority;        // Priority for priority scheduling
} Process;

// Function to calculate and print the results
void calculate_times(Process p[], int n) {
    int total_wt = 0, total_tat = 0;
    printf("\nPID\tBurst Time\tArrival Time\tWaiting Time\tTurnaround Time\n");
    for(int i = 0; i < n; i++) {
        p[i].tat = p[i].bt + p[i].wt;  // Turnaround time = Burst time + Waiting time
        total_wt += p[i].wt;
        total_tat += p[i].tat;
        printf("%d\t%d\t\t%d\t\t%d\t\t%d\n", p[i].pid, p[i].bt, p[i].at, p[i].wt, p[i].tat);
    }
    printf("\nAverage Waiting Time: %.2f", (float)total_wt/n);
    printf("\nAverage Turnaround Time: %.2f", (float)total_tat/n);
}

// FCFS Scheduling
void FCFS(Process p[], int n) {
    int total_wt = 0;
    p[0].wt = 0;
    for(int i = 1; i < n; i++) {
        p[i].wt = p[i-1].wt + p[i-1].bt; // Waiting time = Previous waiting time + previous burst time
    }
    calculate_times(p, n);
}

// SJF Scheduling (Preemptive)
void SJF_Preemptive(Process p[], int n) {
    int time = 0, completed = 0;
    int prev_bt = 0;
    while(completed < n) {
        int idx = -1;
        int min_bt = 999999;
        for(int i = 0; i < n; i++) {
            if(p[i].at <= time && p[i].remaining_bt > 0 && p[i].remaining_bt < min_bt) {
                min_bt = p[i].remaining_bt;
                idx = i;
            }
        }
        if(idx != -1) {
            p[idx].remaining_bt--;
            time++;
            if(p[idx].remaining_bt == 0) {
                completed++;
                p[idx].wt = time - p[idx].at - p[idx].bt;
            }
        }
    }
    calculate_times(p, n);
}

// Priority Scheduling (Non-Preemptive)
void Priority_Scheduling(Process p[], int n) {
    for(int i = 0; i < n; i++) {
        for(int j = i+1; j < n; j++) {
            if(p[i].priority < p[j].priority) {
                Process temp = p[i];
                p[i] = p[j];
                p[j] = temp;
            }
        }
    }
    p[0].wt = 0;
    for(int i = 1; i < n; i++) {
        p[i].wt = p[i-1].wt + p[i-1].bt;
    }
    calculate_times(p, n);
}

// Round Robin Scheduling (Preemptive)
void Round_Robin(Process p[], int n, int quantum) {
    int time = 0, completed = 0;
    int remaining_processes = n;
    while(remaining_processes) {
        for(int i = 0; i < n; i++) {
            if(p[i].remaining_bt > 0) {
                if(p[i].remaining_bt > quantum) {
                    time += quantum;
                    p[i].remaining_bt -= quantum;
                } else {
                    time += p[i].remaining_bt;
                    p[i].wt = time - p[i].at - p[i].bt;
                    p[i].remaining_bt = 0;
                    completed++;
                }
            }
        }
    }
    calculate_times(p, n);
}

int main() {
    Process p[MAX];
    int n, choice, quantum;
    
    printf("Enter number of processes: ");
    scanf("%d", &n);
    
    for(int i = 0; i < n; i++) {
        p[i].pid = i+1;
        printf("\nEnter Arrival Time and Burst Time for Process %d: ", i+1);
        scanf("%d %d", &p[i].at, &p[i].bt);
        p[i].remaining_bt = p[i].bt;  // For preemptive algorithms
        p[i].priority = rand() % 10 + 1;  // Assign a random priority for demonstration
    }
    
    printf("\n1. FCFS\n2. SJF (Preemptive)\n3. Priority Scheduling\n4. Round Robin\nChoose the scheduling algorithm: ");
    scanf("%d", &choice);
    
    switch(choice) {
        case 1:
            FCFS(p, n);
            break;
        case 2:
            SJF_Preemptive(p, n);
            break;
        case 3:
            Priority_Scheduling

(p, n);
            break;
        case 4:
            printf("Enter time quantum: ");
            scanf("%d", &quantum);
            Round_Robin(p, n, quantum);
            break;
        default:
            printf("Invalid choice!\n");
            break;
    }
    
    return 0;
}
```

### 6. Conclusion
This program simulates the execution of four different CPU scheduling algorithms and calculates the waiting time and turnaround time for each process. By comparing these scheduling algorithms, we can observe how each affects process execution times and system performance. FCFS may lead to high waiting times, while Round Robin provides a more equitable allocation of CPU time to processes. Preemptive algorithms like SJF minimize waiting time but are more complex to implement.